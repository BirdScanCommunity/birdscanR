% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeObservationTime.R
\name{computeObservationTime}
\alias{computeObservationTime}
\title{computeObservationTime}
\usage{
computeObservationTime(
  timeBins,
  protocolData,
  blindTimes,
  blindTimeAsMtrZero = NULL
)
}
\arguments{
\item{timeBins}{dataframe with the time bins created by the function
\code{createTimeBins}.}

\item{protocolData}{dataframe with the protocol data from the data list
created by the function \code{extractDBData} or a subset of it created by the
function \code{filterProtocolData}.}

\item{blindTimes}{dataframe containing the blind times created by the
function \code{mergeVisibilityAndManualBlindTimes}.}

\item{blindTimeAsMtrZero}{character string vector with the blind time types
which should be treated as observation time with MTR zero.}
}
\value{
returns a dataframe with the time bins completed with the observation
times of each time bin.
}
\description{
Compute blind times and observation times during time bins based
on protocol data and blind times
}
\examples{
\dontrun{
# Set server, database, and other input settings 
# ===========================================================================
  dbServer            = "MACHINE\\\\\\\\SERVERNAME"     # Set the name of your SQL server
  dbName              = "db_Name"                   # Set the name of your database
  dbDriverChar        = "SQL Server"                # Set either "SQL Server" or "PostgreSQL"
  radarTimeZone       = "Etc/GMT0"
  sunOrCivil          = "civil"
  timeRangeData       = c("2021-01-15 00:00", "2021-01-31 00:00")
  timeBinduration_sec = 3600
  
# Open the connection with the database
# ===========================================================================
  dsn = paste0("driver=", dbDriverChar, ";server=", dbServer,
               ";database=", dbName,
               ";uid=", rstudioapi::askForPassword("Database user"),
               ";pwd=", rstudioapi::askForPassword("Database password"))
  dbConnection = RODBC::odbcDriverConnect(dsn)
  
# Get protocol data
# ===========================================================================
  protocolData = getProtocolTable(dbConnection, dbDriverChar)
                         
# Get sunrise/sunset 
# ===========================================================================
  sunriseSunset = twilight(timeRange = timeRangeData,
                           latLon    = c(47.494427, 8.716432),
                           timeZone  = radarTimeZone)
                         
# Create Timebins
# ===========================================================================
  message("Creating time bins..")
  timeBins = createTimeBins(timeRange           = timeRangeData, 
                            timeBinDuration_sec = timeBinduration_sec, 
                            timeZone            = radarTimeZone, 
                            sunriseSunset       = sunriseSunset, 
                            sunOrCivil          = sunOrCivil)

# Get visibility table 
# ===========================================================================
  visibilityTable = getVisibilityTable(dbConnection, dbDriverChar)

# Get manual blind times
# ===========================================================================
  data(manualBlindTimes)
  cManualBlindTimes = manualBlindTimes
  
# Merge manual and automatic blind times
# ===========================================================================
  blindTimes = mergeVisibilityAndManualBlindTimes(visibilityData   = visibilityTable, 
                                                  manualBlindTimes = cManualBlindTimes, 
                                                  protocolData     = protocolData)

# Compute observation time per time bin
# ===========================================================================
  obsTime = computeObservationTime(timeBins     = timeBins, 
                                   protocolData = protocolData, 
                                   blindTimes   = blindTimes, 
                                   blindTimeAsMtrZero = NULL)   
}

}
\author{
Fabian Hertner, \email{fabian.hertner@swiss-birdradar.com};
Birgen Haest, \email{birgen.haest@vogelwarte.ch}
}
